import re
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import Command
from db import Database
from llm import LLMService

logger = logging.getLogger(__name__)
router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class SummaryStates(StatesGroup):
    waiting_for_group_selection = State()
    waiting_for_time_period = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–æ–≤
db = Database()
llm_service = LLMService()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    welcome_text = """
ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–∞—Ö.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/summary - –í—ã–±—Ä–∞—Ç—å –≥—Ä—É–ø–ø—É –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞
/summary today - –ü–µ—Ä–µ—Å–∫–∞–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/summary 3h - –ü–µ—Ä–µ—Å–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞

üí° –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:
1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É
2. –Ø –±—É–¥—É —Å–æ–±–∏—Ä–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è
3. –í –ª–∏—á–∫–µ –≤—ã–∑–æ–≤–∏—Ç–µ /summary –∏ –≤—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É
4. –ü–æ–ª—É—á–∏—Ç–µ –∫—Ä–∞—Ç–∫–∏–π –ø–µ—Ä–µ—Å–∫–∞–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è

üîß –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö, –≥–¥–µ –≤—ã –∏ —è —Å–æ—Å—Ç–æ–∏–º –≤–º–µ—Å—Ç–µ.
"""
    await message.answer(welcome_text)

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    help_text = """
üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞:

üîπ /summary - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –∏ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞
üîπ /summary today - –ë—ã—Å—Ç—Ä—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞ —Å–µ–≥–æ–¥–Ω—è
üîπ /summary 3h - –ü–µ—Ä–µ—Å–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞
üîπ /summary 6h - –ü–µ—Ä–µ—Å–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
üîπ /summary 12h - –ü–µ—Ä–µ—Å–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤

üí° –°–æ–≤–µ—Ç—ã:
‚Ä¢ –ë–æ—Ç –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–æ–æ–±—â–µ–Ω–∏–π
‚Ä¢ –ü–µ—Ä–µ—Å–∫–∞–∑ —Å–æ–∑–¥–∞–µ—Ç—Å—è —Å –ø–æ–º–æ—â—å—é –ò–ò
‚Ä¢ –†–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö, –≥–¥–µ –≤—ã —Å–æ—Å—Ç–æ–∏—Ç–µ
"""
    await message.answer(help_text)

@router.message(Command("summary"))
async def cmd_summary(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /summary"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        command_parts = message.text.split()
        
        if len(command_parts) > 1:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏
            time_param = command_parts[1].lower()
            
            if time_param == "today":
                await handle_today_summary(message)
                return
            elif time_param.endswith('h'):
                # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
                try:
                    hours = int(time_param[:-1])
                    await handle_hours_summary(message, hours)
                    return
                except ValueError:
                    await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /summary 3h")
                    return
        
        # –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /summary - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø
        await show_groups_list(message, state)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã summary: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã")

async def show_groups_list(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        groups = await db.get_user_groups(user_id)
        
        if not groups:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø, –≥–¥–µ –≤—ã –∏ —è —Å–æ—Å—Ç–æ–∏–º –≤–º–µ—Å—Ç–µ.\n\n–î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        
        for group in groups:
            chat_title = group['chat_title'] or f"–ì—Ä—É–ø–ø–∞ {group['chat_id']}"
            message_count = group['message_count']
            
            button_text = f"üìã {chat_title} ({message_count} —Å–æ–æ–±—â.)"
            callback_data = f"group_{group['chat_id']}"
            
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=button_text, callback_data=callback_data)
            ])
        
        await message.answer(
            "üìã –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞:",
            reply_markup=keyboard
        )
        
        await state.set_state(SummaryStates.waiting_for_group_selection)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≥—Ä—É–ø–ø")

@router.callback_query(lambda c: c.data.startswith('group_'))
async def process_group_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø—ã"""
    try:
        chat_id = int(callback.data.split('_')[1])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É
        await state.update_data(selected_group_id=chat_id)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –≤—Ä–µ–º–µ–Ω–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üìÖ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–æ–æ–±—â–µ–Ω–∏–π", callback_data="time_recent")],
            [InlineKeyboardButton(text="üìÖ –ó–∞ —Å–µ–≥–æ–¥–Ω—è", callback_data="time_today")],
            [InlineKeyboardButton(text="‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 —á–∞—Å–∞", callback_data="time_3h")],
            [InlineKeyboardButton(text="‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤", callback_data="time_6h")],
            [InlineKeyboardButton(text="‚è∞ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 —á–∞—Å–æ–≤", callback_data="time_12h")]
        ])
        
        await callback.message.edit_text(
            "‚è∞ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞:",
            reply_markup=keyboard
        )
        
        await state.set_state(SummaryStates.waiting_for_time_period)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã: {e}")
        await callback.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã")

@router.callback_query(lambda c: c.data.startswith('time_'))
async def process_time_selection(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        time_option = callback.data.split('_')[1]
        user_data = await state.get_data()
        chat_id = user_data.get('selected_group_id')
        
        if not chat_id:
            await callback.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞")
            return
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await callback.message.edit_text("üîÑ –°–æ–∑–¥–∞—é –ø–µ—Ä–µ—Å–∫–∞–∑... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞
        if time_option == "recent":
            messages = await db.get_recent_messages(chat_id, limit=200)
            time_period = "–ø–æ—Å–ª–µ–¥–Ω–∏–µ 200 —Å–æ–æ–±—â–µ–Ω–∏–π"
        elif time_option == "today":
            messages = await db.get_today_messages(chat_id)
            time_period = "—Å–µ–≥–æ–¥–Ω—è"
        else:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤
            hours = int(time_option[:-1])
            messages = await db.get_recent_messages(chat_id, limit=200, hours=hours)
            time_period = f"–ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤"
        
        if not messages:
            await callback.message.edit_text("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥.")
            await state.clear()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
        group_title = messages[0].get('chat_title', f"–ì—Ä—É–ø–ø–∞ {chat_id}") if messages else f"–ì—Ä—É–ø–ø–∞ {chat_id}"
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä–µ—Å–∫–∞–∑
        summary = await llm_service.generate_group_summary(messages, group_title, time_period)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        await callback.message.edit_text(summary)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞")
        await state.clear()

async def handle_today_summary(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /summary today"""
    try:
        user_id = message.from_user.id
        groups = await db.get_user_groups(user_id)
        
        if not groups:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É (—Å–∞–º—É—é –∞–∫—Ç–∏–≤–Ω—É—é)
        group = groups[0]
        chat_id = group['chat_id']
        group_title = group['chat_title'] or f"–ì—Ä—É–ø–ø–∞ {chat_id}"
        
        await message.answer("üîÑ –°–æ–∑–¥–∞—é –ø–µ—Ä–µ—Å–∫–∞–∑ –∑–∞ —Å–µ–≥–æ–¥–Ω—è...")
        
        messages = await db.get_today_messages(chat_id)
        
        if not messages:
            await message.answer("‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ —Å–µ–≥–æ–¥–Ω—è –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
            return
        
        summary = await llm_service.generate_group_summary(messages, group_title, "—Å–µ–≥–æ–¥–Ω—è")
        await message.answer(summary)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ today summary: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞")

async def handle_hours_summary(message: Message, hours: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /summary Nh"""
    try:
        user_id = message.from_user.id
        groups = await db.get_user_groups(user_id)
        
        if not groups:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        
        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É (—Å–∞–º—É—é –∞–∫—Ç–∏–≤–Ω—É—é)
        group = groups[0]
        chat_id = group['chat_id']
        group_title = group['chat_title'] or f"–ì—Ä—É–ø–ø–∞ {chat_id}"
        
        await message.answer(f"üîÑ –°–æ–∑–¥–∞—é –ø–µ—Ä–µ—Å–∫–∞–∑ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤...")
        
        messages = await db.get_recent_messages(chat_id, limit=200, hours=hours)
        
        if not messages:
            await message.answer(f"‚ùå –ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤ –≤ —ç—Ç–æ–π –≥—Ä—É–ø–ø–µ.")
            return
        
        time_period = f"–ø–æ—Å–ª–µ–¥–Ω–∏–µ {hours} —á–∞—Å–æ–≤"
        summary = await llm_service.generate_group_summary(messages, group_title, time_period)
        await message.answer(summary)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ hours summary: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞")

@router.message()
async def handle_all_messages(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –≥—Ä—É–ø–ø
        if (message.chat.type in ['group', 'supergroup'] and 
            message.text and 
            not message.text.startswith('/')):
            
            chat_id = message.chat.id
            chat_title = message.chat.title
            user_id = message.from_user.id
            username = message.from_user.username or message.from_user.first_name
            message_text = message.text
            
            await db.save_message(chat_id, chat_title, user_id, username, message_text)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}") 