import openai
import logging
from typing import List, Dict
from config import OPENAI_API_KEY

logger = logging.getLogger(__name__)

class LLMService:
    def __init__(self):
        try:
            self.client = openai.OpenAI(api_key=OPENAI_API_KEY)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI –∫–ª–∏–µ–Ω—Ç–∞: {e}")
            raise
    
    def format_messages_for_summary(self, messages: List[Dict]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ LLM"""
        if not messages:
            return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
        
        formatted_text = "–û–±—Å—É–∂–¥–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø–µ:\n\n"
        
        for msg in messages:
            username = msg.get('username', f"User{msg.get('user_id', 'Unknown')}")
            text = msg.get('message_text', '').strip()
            timestamp = msg.get('timestamp', '')
            
            if text:  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—É—Å—Ç—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                formatted_text += f"[{timestamp}] {username}: {text}\n\n"
        
        return formatted_text
    
    async def generate_summary(self, messages: List[Dict], time_period: str = "–æ–±—â–µ–µ") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫—Ä–∞—Ç–∫–æ–≥–æ –ø–µ—Ä–µ—Å–∫–∞–∑–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
        try:
            if not messages:
                return "–ù–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥."
            
            formatted_messages = self.format_messages_for_summary(messages)
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
            unique_users = len(set(msg.get('user_id') for msg in messages))
            total_messages = len(messages)
            
            prompt = f"""
–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ Telegram-–≥—Ä—É–ø–ø–∞—Ö.

–°–æ–∑–¥–∞–π –∫—Ä–∞—Ç–∫–∏–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∑–∞ {time_period} –ø–µ—Ä–∏–æ–¥.

–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:
- –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {total_messages}
- –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {unique_users}

–û–±—Å—É–∂–¥–µ–Ω–∏–µ:
{formatted_messages}

–°–æ–∑–¥–∞–π —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–µ—Ä–µ—Å–∫–∞–∑, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç:
1. –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è
2. –ö–ª—é—á–µ–≤—ã–µ –º–æ–º–µ–Ω—Ç—ã –∏ —Ä–µ—à–µ–Ω–∏—è
3. –í–∞–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã
4. –û–±—â–∏–π —Ç–æ–Ω –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è

–ü–µ—Ä–µ—Å–∫–∞–∑ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º (–Ω–µ –±–æ–ª–µ–µ 300-400 —Å–ª–æ–≤) –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º.
"""
            
            response = self.client.chat.completions.create(
                model="gpt-3.5-turbo",
                messages=[
                    {"role": "system", "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫—Ä–∞—Ç–∫–∏—Ö –ø–µ—Ä–µ—Å–∫–∞–∑–æ–≤ –æ–±—Å—É–∂–¥–µ–Ω–∏–π –≤ Telegram-–≥—Ä—É–ø–ø–∞—Ö. –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ."},
                    {"role": "user", "content": prompt}
                ],
                max_tokens=500,
                temperature=0.7
            )
            
            summary = response.choices[0].message.content.strip()
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∫–æ–Ω–µ—Ü
            summary += f"\n\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {total_messages} —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç {unique_users} —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
            
            return summary
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞: {e}")
            return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–µ—Ä–µ—Å–∫–∞–∑–∞: {str(e)}"
    
    async def generate_group_summary(self, messages: List[Dict], group_title: str, 
                                   time_period: str = "–æ–±—â–µ–µ") -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–µ—Ä–µ—Å–∫–∞–∑–∞ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –≥—Ä—É–ø–ø—ã"""
        summary = await self.generate_summary(messages, time_period)
        
        header = f"üìã –ü–µ—Ä–µ—Å–∫–∞–∑ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø–µ ¬´{group_title}¬ª\n"
        if time_period != "–æ–±—â–µ–µ":
            header += f"‚è∞ –ü–µ—Ä–∏–æ–¥: {time_period}\n"
        header += "‚îÄ" * 50 + "\n\n"
        
        return header + summary 